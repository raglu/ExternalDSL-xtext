/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.CarryCapacity
import org.xtext.example.mydsl.myDsl.Durability
import org.xtext.example.mydsl.myDsl.Escapeable
import org.xtext.example.mydsl.myDsl.Health
import org.xtext.example.mydsl.myDsl.Item
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.xtext.example.mydsl.myDsl.NPC
import org.xtext.example.mydsl.myDsl.Player
import org.xtext.example.mydsl.myDsl.Weight
import org.xtext.example.mydsl.myDsl.HostileNPC
import org.xtext.example.mydsl.myDsl.Weapon
import org.xtext.example.mydsl.myDsl.Damage
import org.xtext.example.mydsl.myDsl.Aggressive
import org.xtext.example.mydsl.myDsl.EntityAttribute
import org.xtext.example.mydsl.myDsl.GameWorld
import org.xtext.example.mydsl.myDsl.Element
import org.xtext.example.mydsl.myDsl.GameRules

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {

	@Check
	def checkPlayerAttribute(Player player) {

		val missingAttributes = newArrayList("health", "carryCapacity")

		for (EntityAttribute ea : player.attributes) {
			if (ea instanceof Health)
				missingAttributes -= "health"
			if (ea instanceof CarryCapacity)
				missingAttributes -= "carryCapacity"
		}

		if (! missingAttributes.isEmpty())
			error("Player entity needs following attributes: " + missingAttributes,
				MyDslPackage.eINSTANCE.player_PlayerType)
	}

	@Check
	def checkItemAttribute(Item item) {

		val missingAttributes = newArrayList("weight")

		for (EntityAttribute ea : item.attributes) {
			if (ea instanceof Weight)
				missingAttributes -= "weight"
		}

		if (! missingAttributes.isEmpty())
			error("Item entity needs following attributes: " + missingAttributes, MyDslPackage.eINSTANCE.item_ItemType)

	}

	@Check
	def checkWeaponAttributes(Weapon weapon) {

		val missingAttributes = newArrayList("damage", "weight")

		for (EntityAttribute ea : weapon.attributes) {
			if (ea instanceof Damage)
				missingAttributes -= "damage"
			if (ea instanceof Weight)
				missingAttributes -= "weight"
		}

		if (! missingAttributes.isEmpty())
			error("Weapon entity needs following attributes: " + missingAttributes,
				MyDslPackage.eINSTANCE.weapon_WeaponType)

	}

	@Check
	def checkNPCAttribute(NPC npc) {
	}

	@Check
	def checkHostileNPCAttribute(HostileNPC hostileNPC) {

		val missingAttributes = newArrayList("health", "damage", "escapeable")

		for (EntityAttribute ea : hostileNPC.attributes) {
			if (ea instanceof Health)
				missingAttributes -= "health"
			if (ea instanceof Damage)
				missingAttributes -= "damage"
			if (ea instanceof Escapeable)
				missingAttributes -= "escapeable"
		}

		if (! missingAttributes.isEmpty())
			error("HostileNPC entity needs following attributes: " + missingAttributes,
				MyDslPackage.eINSTANCE.hostileNPC_HostileNpcType)

	}

	@Check
	def checkGameRulesInstances(GameWorld gameWorld) {

		var instances = 0

		for (Element e : gameWorld.elements) {
			if (e instanceof GameRules)
				instances++

		}

		if (instances > 1) {
			error("Too many GameRules. Use only one instance to list all your rules",
				MyDslPackage.eINSTANCE.gameWorld_Name)
		}
	}

}
