/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Aggressive
import org.xtext.example.mydsl.myDsl.And
import org.xtext.example.mydsl.myDsl.Attribute
import org.xtext.example.mydsl.myDsl.CarryCapacity
import org.xtext.example.mydsl.myDsl.Comparison
import org.xtext.example.mydsl.myDsl.Constant
import org.xtext.example.mydsl.myDsl.Damage
import org.xtext.example.mydsl.myDsl.Div
import org.xtext.example.mydsl.myDsl.Durability
import org.xtext.example.mydsl.myDsl.Element
import org.xtext.example.mydsl.myDsl.Escapeable
import org.xtext.example.mydsl.myDsl.GameWorld
import org.xtext.example.mydsl.myDsl.Health
import org.xtext.example.mydsl.myDsl.HostileNPC
import org.xtext.example.mydsl.myDsl.HostileNPCList
import org.xtext.example.mydsl.myDsl.Item
import org.xtext.example.mydsl.myDsl.ItemList
import org.xtext.example.mydsl.myDsl.Minus
import org.xtext.example.mydsl.myDsl.Mult
import org.xtext.example.mydsl.myDsl.NPC
import org.xtext.example.mydsl.myDsl.NPCList
import org.xtext.example.mydsl.myDsl.Or
import org.xtext.example.mydsl.myDsl.Path
import org.xtext.example.mydsl.myDsl.PathList
import org.xtext.example.mydsl.myDsl.Player
import org.xtext.example.mydsl.myDsl.PlayerList
import org.xtext.example.mydsl.myDsl.Plus
import org.xtext.example.mydsl.myDsl.Room
import org.xtext.example.mydsl.myDsl.RoomAttribute
import org.xtext.example.mydsl.myDsl.Var
import org.xtext.example.mydsl.myDsl.Weapon
import org.xtext.example.mydsl.myDsl.WeaponList
import org.xtext.example.mydsl.myDsl.Weight
import org.xtext.example.mydsl.myDsl.GameEntity

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		BoilerPlateGenerator.generateCode(fsa);
		
		for (e : resource.allContents.toIterable.filter(Player)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.playerCompile)
		}
		for (e : resource.allContents.toIterable.filter(NPC)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.npcCompile)
		}
		for (e : resource.allContents.toIterable.filter(HostileNPC)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.hostileNpcCompile)
		}
		for (e : resource.allContents.toIterable.filter(Item)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.itemCompile)
		}
		for (e : resource.allContents.toIterable.filter(Weapon)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.weaponCompile)
		}
		for (e : resource.allContents.toIterable.filter(Room)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.roomCompile)
		}
		for (e : resource.allContents.toIterable.filter(GameWorld)) {
			fsa.generateFile("gameDSL/EntityGenerator.java", e.gentityGeneratorCompile)
		}
		for (e : resource.allContents.toIterable.filter(GameWorld)) {
			fsa.generateFile("gameDSL/Main.java", e.mainCompile)
		}

	/*val GameGenerator = resource.allContents.filter(GameWorld).next

	 System::out.println(GameGenerator.generate)*/
	}

	def CharSequence gentityGeneratorCompile(GameWorld gameWorld) {
		'''
			package gameDSL;
			
			import java.util.ArrayList;
			
			public class EntityGenerator{
			
				public static ArrayList<Room> generateRooms() {
					ArrayList<Room> rooms = new ArrayList<>();
					
			«FOR a : gameWorld.elements.filter(Element).filter(GameEntity)»
				«IF a.type instanceof Room»
					rooms.add(«a.type.name.toFirstUpper».getInstance());
				«ENDIF»
			«ENDFOR»
			
			     	for (Room room : rooms) {
			     	  	room.setPaths();
			     	  	room.setItems();
			     	}
			
			    	 return rooms;
			 	}
			 
			    public static ArrayList<Player> generatePlayers() {
			         ArrayList<Player> players = new ArrayList<>();
			         
			«FOR a : gameWorld.elements.filter(Element).filter(GameEntity)»
				«IF a.type instanceof Room»
					«var room = a.type as Room»
						«FOR b : room.roomAttributes.filter(PlayerList)»
							«FOR c : b.playerList»
								players.add(new «c.name.toFirstUpper»(«room.name.toFirstUpper».getInstance()));
							«ENDFOR»
						«ENDFOR»
				«ENDIF»
			 «ENDFOR»
			 
			     return players;
			     }
			 
			 public static ArrayList<NPC> generateNPCs() {
			         ArrayList<NPC> npcs = new ArrayList<>();
			         
			«FOR a : gameWorld.elements.filter(Element).filter(GameEntity)»
				«IF a.type instanceof Room»
					«var room = a.type as Room»
						«FOR b : room.roomAttributes.filter(NPCList)»
							«FOR c : b.npcList»
								npcs.add(new «c.name.toFirstUpper»(«room.name.toFirstUpper».getInstance()));
							«ENDFOR»
						«ENDFOR»
						«FOR b : room.roomAttributes.filter(HostileNPCList)»
							«FOR c : b.hostileNPCList»
								npcs.add(new «c.name.toFirstUpper»(«room.name.toFirstUpper».getInstance()));
							«ENDFOR»
						«ENDFOR»
				«ENDIF»
			 «ENDFOR»
			 
			     return npcs;
			     }
			}
		'''
	}

	def CharSequence roomCompile(Room room) {
		'''
			package gameDSL;
			public class «room.name.toFirstUpper» extends Room {
				
				static private «room.name.toFirstUpper» instance = new «room.name.toFirstUpper»();
				
				public static «room.name.toFirstUpper» getInstance() {
					return instance;
				}
				
				private «room.name.toFirstUpper»() {
					super("«room.entityName.value»");
				}
				
				public void setPaths() {
					«FOR a : room.roomAttributes.filter(RoomAttribute).filter(PathList)»
						«FOR b: a.pathList.filter(Path)»
							paths.add(new Path(«b.toType.name.toFirstUpper».getInstance(),					
							"«b.entityName.value»"
							«IF b.requireItem!==null»
								, new «b.requireItem.name.toFirstUpper»()
							«ENDIF»));
							
						«ENDFOR»	
					«ENDFOR»
				}
				public void setItems() {
					«FOR a : room.roomAttributes.filter(RoomAttribute).filter(ItemList)»
						«FOR b: a.itemList.filter(Item)»
							items.add(new «b.name.toFirstUpper»());	
						«ENDFOR»	
					«ENDFOR»
					«FOR a : room.roomAttributes.filter(RoomAttribute).filter(WeaponList)»
						«FOR b: a.weaponsList.filter(Weapon)»
							items.add(new «b.name.toFirstUpper»());	
						«ENDFOR»	
					«ENDFOR»
				}
			}
		'''
	}

	def CharSequence itemCompile(Item item) {
		'''
			package gameDSL;
			public class «item.name.toFirstUpper» extends Item {
				
				public «item.name.toFirstUpper»() {
					super("«item.entityName.value»"
					«FOR a : item.attributes.filter(Attribute).filter(Weight)»
						«IF a!==null»
							, «a.weight»
						«ENDIF»
					«ENDFOR»
					);
			
				}
			}
		'''
	}

	def CharSequence weaponCompile(Weapon weapon) {
		'''
			package gameDSL;
			public class «weapon.name.toFirstUpper» extends Weapon {
				
				public «weapon.name.toFirstUpper»() {
					super("«weapon.entityName.value»", 
					«FOR a : weapon.attributes.filter(Attribute).filter(Weight)»
						«a.weight»
					«ENDFOR»,
					«FOR a : weapon.attributes.filter(Attribute).filter(Damage)»
						«a.damage»
					«ENDFOR»,
					«FOR a : weapon.attributes.filter(Attribute).filter(Durability)»
						«a.durability»
					«ENDFOR»
					);
				
				}
			}
		'''
	}

	def CharSequence npcCompile(NPC npc) {
		'''
			package gameDSL;
			public class «npc.name.toFirstUpper» extends NPC {
				
				public «npc.name.toFirstUpper»(Room currentRoom) {
					super(currentRoom, "«npc.entityName.value»");
				}
			}
		'''
	}

	def CharSequence hostileNpcCompile(HostileNPC hostileNpc) {
		'''
			package gameDSL;
			public class «hostileNpc.name.toFirstUpper» extends HostileNPC {
				
				public «hostileNpc.name.toFirstUpper»(Room currentRoom) {
					super(currentRoom, "«hostileNpc.entityName.value»", 
					«FOR a : hostileNpc.attributes.filter(Attribute).filter(Escapeable)»
						«a.escapeable»
					«ENDFOR»,
					«FOR a : hostileNpc.attributes.filter(Attribute).filter(Health)»
						«a.health.value»
					«ENDFOR»,
					«FOR a : hostileNpc.attributes.filter(Attribute).filter(Damage)»
						«a.damage»
					«ENDFOR»
					«FOR a : hostileNpc.attributes.filter(Attribute).filter(Aggressive)»
						«IF a.aggressive»
							, true
						«ENDIF»
					«ENDFOR»);
				
				}
			}
		'''
	}

	def CharSequence playerCompile(Player player) {
		'''
			package gameDSL;
			public class «player.name.toFirstUpper» extends Player {
				
				public «player.name.toFirstUpper»(Room currentRoom) {
					super(currentRoom, "«player.entityName.value»", «FOR a : player.attributes.filter(Attribute).filter(Health)»
																																										«a.health.value»
					«ENDFOR»,
					«FOR a : player.attributes.filter(Attribute).filter(CarryCapacity)»
						«a.carryCapacity»
					«ENDFOR»);
				}
			}
		'''
	}

	def CharSequence mainCompile(GameWorld gameWorld) {
			'''
			package gameDSL;
			
			public class Main {
			    public static void main(String[] argv) {
			        Game g = new Game("«gameWorld.name»");
			        g.play();
			    }
			}
			'''
	}

	// def generateJavaFile()
	def String generate(GameWorld world) {
		world.elements.generateElements
	}

	def dispatch String generateElements(EList<Element> list) {
	}

	def dispatch playerGenerator(Player player) {
	}

	// logic dispatchers
	def dispatch CharSequence generateLogicExp(And exp) {
		exp.left.generateLogicExp + "&&" + exp.right.generateLogicExp
	}

	def dispatch CharSequence generateLogicExp(Or exp) { exp.left.generateLogicExp + "||" + exp.right.generateLogicExp }

	def dispatch CharSequence generateLogicExp(Comparison exp) {
		exp.left.generateMExp + exp.op + exp.right.generateMExp
	}

	def dispatch CharSequence generateMExp(Plus exp) { exp.left.generateMExp + "+" + exp.right.generateMExp }

	def dispatch CharSequence generateMExp(Minus exp) { exp.left.generateMExp + "-" + exp.right.generateMExp }

	def dispatch CharSequence generateMExp(Mult exp) { exp.left.generateMExp + "*" + exp.right.generateMExp }

	def dispatch CharSequence generateMExp(Div exp) { exp.left.generateMExp + "/" + exp.right.generateMExp }

	def dispatch CharSequence generateMExp(Var exp) '''this._«exp.attribute»'''

	def dispatch CharSequence generateMExp(Constant exp) '''«exp.value»'''

}
