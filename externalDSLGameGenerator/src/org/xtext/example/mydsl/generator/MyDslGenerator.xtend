/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Aggressive
import org.xtext.example.mydsl.myDsl.EntityAttribute
import org.xtext.example.mydsl.myDsl.CarryCapacity
import org.xtext.example.mydsl.myDsl.Damage
import org.xtext.example.mydsl.myDsl.Durability
import org.xtext.example.mydsl.myDsl.Element
import org.xtext.example.mydsl.myDsl.Escapeable
import org.xtext.example.mydsl.myDsl.GameWorld
import org.xtext.example.mydsl.myDsl.Health
import org.xtext.example.mydsl.myDsl.HostileNPC
import org.xtext.example.mydsl.myDsl.HostileNPCList
import org.xtext.example.mydsl.myDsl.Item
import org.xtext.example.mydsl.myDsl.ItemList
import org.xtext.example.mydsl.myDsl.NPC
import org.xtext.example.mydsl.myDsl.NPCList
import org.xtext.example.mydsl.myDsl.Path
import org.xtext.example.mydsl.myDsl.PathList
import org.xtext.example.mydsl.myDsl.Player
import org.xtext.example.mydsl.myDsl.PlayerList
import org.xtext.example.mydsl.myDsl.RoomAttribute
import org.xtext.example.mydsl.myDsl.Weapon
import org.xtext.example.mydsl.myDsl.WeaponList
import org.xtext.example.mydsl.myDsl.Weight
import org.xtext.example.mydsl.myDsl.GameRoom
import org.xtext.example.mydsl.myDsl.GameRules
import org.xtext.example.mydsl.myDsl.Attribute

class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		BoilerPlateGenerator.generateCode(fsa);
		
		for (e : resource.allContents.toIterable.filter(Player)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.playerCompile)
		}
		for (e : resource.allContents.toIterable.filter(Item)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.itemCompile)
		}
		for (e : resource.allContents.toIterable.filter(Weapon)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.weaponCompile)
		}
		for (e : resource.allContents.toIterable.filter(NPC)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.npcCompile)
		}
		for (e : resource.allContents.toIterable.filter(HostileNPC)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.hostileNpcCompile)
		}
		for (e : resource.allContents.toIterable.filter(GameRoom)) {
			fsa.generateFile("gameDSL/" + e.name.toFirstUpper + ".java", e.gameRoomCompile)
		}
		for (e : resource.allContents.toIterable.filter(GameRules)) {
			fsa.generateFile("gameDSL/GameRules.java", e.gameRulesCompile)
		}
		for (e : resource.allContents.toIterable.filter(GameWorld)) {
			fsa.generateFile("gameDSL/EntityGenerator.java", e.entityGeneratorCompile)
		}
		for (e : resource.allContents.toIterable.filter(GameWorld)) {
			fsa.generateFile("gameDSL/Main.java", e.mainCompile)
		}

	}

	def CharSequence entityGeneratorCompile(GameWorld gameWorld) {
		'''
			package gameDSL;
			
			import java.util.ArrayList;
			
			public class EntityGenerator{
			
				public static ArrayList<Room> generateRooms() {
					ArrayList<Room> rooms = new ArrayList<>();
					
			«FOR a : gameWorld.elements.filter(Element)»
				«IF a instanceof GameRoom»
					rooms.add(«a.name.toFirstUpper».getInstance());
				«ENDIF»
			«ENDFOR»
			
			     	for (Room room : rooms) {
			     	  	room.setPaths();
			     	  	room.setItems();
			     	}
			
			    	 return rooms;
			 	}
			 
			    public static ArrayList<Player> generatePlayers() {
			         ArrayList<Player> players = new ArrayList<>();
			         
			«FOR a : gameWorld.elements.filter(Element)»
				«IF a instanceof GameRoom»
					«var room = a as GameRoom»
						«FOR b : room.roomAttributes.filter(PlayerList)»
							«FOR c : b.playerList»
								players.add(new «c.name.toFirstUpper»(«room.name.toFirstUpper».getInstance()));
							«ENDFOR»
						«ENDFOR»
				«ENDIF»
			 «ENDFOR»
			 
			     return players;
			     }
			 
			 public static ArrayList<NPC> generateNPCs() {
			         ArrayList<NPC> npcs = new ArrayList<>();
			         
			«FOR a : gameWorld.elements.filter(Element)»
				«IF a instanceof GameRoom»
					«var room = a as GameRoom»
						«FOR b : room.roomAttributes.filter(NPCList)»
							«FOR c : b.npcList»
								npcs.add(new «c.name.toFirstUpper»(«room.name.toFirstUpper».getInstance()));
							«ENDFOR»
						«ENDFOR»
						«FOR b : room.roomAttributes.filter(HostileNPCList)»
							«FOR c : b.hostileNPCList»
								npcs.add(new «c.name.toFirstUpper»(«room.name.toFirstUpper».getInstance()));
							«ENDFOR»
						«ENDFOR»
				«ENDIF»
			 «ENDFOR»
			 
			     return npcs;
			     }
			}
		'''
	}

	def CharSequence gameRoomCompile(GameRoom gameRoom) {
		'''
			package gameDSL;
			public class «gameRoom.name.toFirstUpper» extends Room {
				
				static private «gameRoom.name.toFirstUpper» instance = new «gameRoom.name.toFirstUpper»();
				
				public static «gameRoom.name.toFirstUpper» getInstance() {
					return instance;
				}
				
				private «gameRoom.name.toFirstUpper»() {
					super("«gameRoom.entityName»");
				}
				
				public void setPaths() {
					«FOR a : gameRoom.roomAttributes.filter(RoomAttribute).filter(PathList)»
						«FOR b: a.paths.filter(Path)»
							paths.add(new Path(«b.toType.name.toFirstUpper».getInstance(),					
							"«b.entityName»"
							«IF b.requireItem!==null»
								, new «b.requireItem.name.toFirstUpper»()
							«ENDIF»));
							
						«ENDFOR»	
					«ENDFOR»
				}
				public void setItems() {
					«FOR a : gameRoom.roomAttributes.filter(RoomAttribute).filter(ItemList)»
						«FOR b: a.itemList.filter(Item)»
							items.add(new «b.name.toFirstUpper»());	
						«ENDFOR»	
					«ENDFOR»
					«FOR a : gameRoom.roomAttributes.filter(RoomAttribute).filter(WeaponList)»
						«FOR b: a.weaponsList.filter(Weapon)»
							items.add(new «b.name.toFirstUpper»());	
						«ENDFOR»	
					«ENDFOR»
				}
			}
		'''
	}

	def CharSequence itemCompile(Item item) {
		'''
			package gameDSL;
			public class «item.name.toFirstUpper» extends Item {
				
				public «item.name.toFirstUpper»() {
					super("«item.entityName»"
					«FOR a : item.attributes.filter(EntityAttribute).filter(Weight)»
						«IF a!==null»
							, «a.weight»
						«ENDIF»
					«ENDFOR»
					);
				«FOR a : item.attributes.filter(EntityAttribute).filter(Attribute)»
					«IF a.stringValue !== null »
						public String «a.name» = "«a.stringValue»";
					«ELSE»
						public int «a.name» = «a.intValue»;
					«ENDIF»
				«ENDFOR»
				}
			}
		'''
	}

	def CharSequence weaponCompile(Weapon weapon) {
		'''
			package gameDSL;
			public class «weapon.name.toFirstUpper» extends Weapon {
				
				public «weapon.name.toFirstUpper»() {
					super("«weapon.entityName»", 
					«FOR a : weapon.attributes.filter(EntityAttribute).filter(Weight)»
						«a.weight»
					«ENDFOR»,
					«FOR a : weapon.attributes.filter(EntityAttribute).filter(Damage)»
						«a.damage»
					«ENDFOR»,
					«FOR a : weapon.attributes.filter(EntityAttribute).filter(Durability)»
						«a.durability»
					«ENDFOR»
					);
				}
				«FOR a : weapon.attributes.filter(EntityAttribute).filter(Attribute)»
						«IF a.stringValue !== null »
						public String «a.name» = "«a.stringValue»";
						«ELSE»
						public int «a.name» = «a.intValue»;
						«ENDIF»
				«ENDFOR»
			}
		'''
	}

	def CharSequence npcCompile(NPC npc) {
		'''
			package gameDSL;
			public class «npc.name.toFirstUpper» extends NPC {
				
				public «npc.name.toFirstUpper»(Room currentRoom) {
					super(currentRoom, "«npc.entityName»");
				}
				«FOR a : npc.attributes.filter(EntityAttribute).filter(Attribute)»
						«IF a.stringValue !== null »
						public String «a.name» = "«a.stringValue»";
						«ELSE»
						public int «a.name» = «a.intValue»;
						«ENDIF»
				«ENDFOR»
			}
		'''
	}

	def CharSequence hostileNpcCompile(HostileNPC hostileNpc) {
		'''
			package gameDSL;
			public class «hostileNpc.name.toFirstUpper» extends HostileNPC {
				
				public «hostileNpc.name.toFirstUpper»(Room currentRoom) {
					super(currentRoom, "«hostileNpc.entityName»", 
					«FOR a : hostileNpc.attributes.filter(EntityAttribute).filter(Escapeable)»
						«a.escapeable»
					«ENDFOR»,
					«FOR a : hostileNpc.attributes.filter(EntityAttribute).filter(Health)»
						«a.health»
					«ENDFOR»,
					«FOR a : hostileNpc.attributes.filter(EntityAttribute).filter(Damage)»
						«a.damage»
					«ENDFOR»
					«FOR a : hostileNpc.attributes.filter(EntityAttribute).filter(Aggressive)»
						«IF a.aggressive»
							, true
						«ENDIF»
					«ENDFOR»);
					
				«FOR a : hostileNpc.attributes.filter(EntityAttribute).filter(Attribute)»
					«IF a.stringValue !== null »
						public String «a.name» = "«a.stringValue»";
					«ELSE»
						public int «a.name» = «a.intValue»;
					«ENDIF»
				«ENDFOR»
				
				}
			}
		'''
	}
	
	def CharSequence playerCompile(Player player) {
		'''
			package gameDSL;
			public class «player.name.toFirstUpper» extends Player {
				
				public «player.name.toFirstUpper»(Room currentRoom) {
					super(currentRoom, "«player.entityName»", «FOR a : player.attributes.filter(EntityAttribute).filter(Health)»
						«a.health»
					«ENDFOR»,
					«FOR a : player.attributes.filter(EntityAttribute).filter(CarryCapacity)»
						«a.carryCapacity»
					«ENDFOR»);
				}
				
				«FOR a : player.attributes.filter(EntityAttribute).filter(Attribute)»
						«IF a.stringValue !== null »
						public String «a.name» = "«a.stringValue»";
						«ELSE»
						public int «a.name» = «a.intValue»;
						«ENDIF»
				«ENDFOR»
				
			}
		'''
	}
	
	def CharSequence gameRulesCompile(GameRules gameRules) {
			'''
			package gameDSL;
			
			public class GameRules {
			
				private final float time = 300;
				private final float startTime;
			
				private final Game game;
			
				public GameRules(Game game) {
					this.game = game;
					startTime = System.currentTimeMillis() / 1000L;
				}
			
				public void checkRules() {
					checkTime();
					checkRule1();
					checkRule2();
					checkRule3();
					checkRule4();
				}
				

				private void checkTime() {
					if (time <= System.currentTimeMillis() / 1000L - startTime)
						game.gameOver();
				}
			
				private void checkRule1() {
					for (Player player : game.players) {
						if (player.getCurrentRoom() instanceof Tower_level_2) {
							game.winGame();
						}
					}
				}
			
				private void checkRule2() {
					for (Player player : game.players) {
						if (player.getCurrentRoom() instanceof Tower_level_2)
							game.gameOver();
					}
				}
			
				private void checkRule3() {
					for (Player player : game.players) {
						if (player.getHealth() <= 0)
							game.gameOver();
					}
				}

			
				private void checkRule4() {
					for (Player player : game.players) {
						Weapon weapon = (Weapon) player.getEquipped();
						if (weapon != null)
							if (weapon.getDurability() <= 0)
								weapon = null;
					}
				}
			
			}
			
			'''
	}

	def CharSequence mainCompile(GameWorld gameWorld) {
			'''
			package gameDSL;
			
			public class Main {
			    public static void main(String[] argv) {
			        Game g = new Game("«gameWorld.name»");
			        g.play();
			    }
			}
			'''
	}

}
